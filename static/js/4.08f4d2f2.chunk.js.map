{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogsItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/Dialogs.js","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.js"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength100","maxLengthCreator","minLength3","minLengthCreator","AddMassageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","spellCheck","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messageElements","messages","m","isAuth","dialogsItems","values","sendMessage","newMassegeBody","mapStateToPropsForRedirect","auth","compose","connect","Component","RedirectComponent","this","React"],"mappings":"uHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,4B,6JCgB/HC,EAZK,SAACC,GAEjB,IAAIC,EAAO,WAAaD,EAAME,GAE9B,OACI,yBAAKC,UAAWC,IAAEC,OAAS,GAAKD,IAAEE,QAC9B,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,Q,kBCDvBC,EAPC,SAACT,GAEb,OACI,yBAAKG,UAAWC,IAAEC,QAASL,EAAMU,U,yCCInCC,EAAeC,YAAiB,KAChCC,EAAaC,YAAiB,GA2C9BC,EAAsBC,YAAU,CAACC,KAAM,wBAAjBD,EAbL,SAAChB,GACpB,OACI,0BAAMkB,SAAUlB,EAAMmB,cAClB,6BACI,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAUC,WAAW,OACvCC,SAAU,CAACC,IAAUd,EAAcE,GACnCL,KAAK,iBAAiBkB,YAAY,wBAEtC,6BAAK,oDAOFC,EA3CC,SAAC3B,GAEb,IAAI4B,EAAQ5B,EAAM6B,YAMdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYzB,KAAMyB,EAAEzB,KAAM0B,IAAKD,EAAE/B,GAAIA,GAAI+B,EAAE/B,QACpFiC,EAAkBP,EAAMQ,SAASJ,KAAI,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAS3B,QAAS2B,EAAE3B,QAASwB,IAAKG,EAAEnC,QAElF,OAAKF,EAAMsC,OAIP,yBAAKnC,UAAWC,IAAE2B,SACd,yBAAK5B,UAAWC,IAAEmC,cACbT,GAEL,yBAAK3B,UAAWC,IAAEgC,UACd,6BAAMD,IAGV,kBAACpB,EAAD,CAAqBG,SAnBT,SAACsB,GACjBxC,EAAMyC,YAAYD,EAAOE,oBAMH,kBAAC,IAAD,CAAUnC,GAAI,Y,gDCnBxCoC,EAA6B,SAACf,GAAD,MAAY,CAEzCU,OAAQV,EAAMgB,KAAKN,S,OCIRO,sBACXC,aALkB,SAAClB,GAAD,MAAY,CAC9BC,YAAYD,EAAMC,eAIO,CAACY,mBDDE,SAACM,GAAe,IAEtCC,EAFqC,iLAInC,OAAKC,KAAKjD,MAAMsC,OAET,kBAACS,EAAcE,KAAKjD,OAFI,kBAAC,IAAD,CAAUO,GAAG,eAJT,GAEX2C,IAAMH,WAUtC,OAFqCD,YAAQH,EAARG,CAAoCE,KCV9DH,CAGTlB","file":"static/js/4.08f4d2f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__Bw5__\",\"dialogsItems\":\"Dialogs_dialogsItems__2fbuI\",\"active\":\"Dialogs_active__2AWvz\",\"messages\":\"Dialogs_messages__9ey1u\"};","import React from 'react';\r\nimport s from './DialogItem.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\n const DialogItem = (props) => {\r\n    \r\n    let path = \"/dialogs\" + props.id;\r\n    \r\n    return(\r\n        <div className={s.dialog + '' + s.active}>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\nconst Message = (props) => {\r\n    \r\n    return(\r\n        <div className={s.dialog}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogsItem/DialogItem'\r\nimport Message from './Message/Message'\r\nimport { Redirect } from 'react-router-dom';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from './../common/FormsControls/FormControls';\r\nimport { maxLengthCreator, minLengthCreator, required } from '../../utils/validators/validators';\r\n\r\n\r\nconst maxLength100 = maxLengthCreator(100)\r\nconst minLength3 = minLengthCreator(3)\r\n\r\nconst Dialogs = (props) => {\r\n\r\n    let state = props.dialogsPage;\r\n\r\n    let addNewMassage = (values) => {\r\n        props.sendMessage(values.newMassegeBody)\r\n    }\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id} />);\r\n    let messageElements = state.messages.map(m => <Message message={m.message} key={m.id} />);\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'} />\r\n\r\n    return (\r\n\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{messageElements}</div>\r\n\r\n            </div>\r\n            <AddMassageFormRedux onSubmit={addNewMassage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst AddMassageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea} spellCheck=\"true\" \r\n                validate={[required, maxLength100, minLength3]}\r\n                name=\"newMassegeBody\" placeholder=\"Enter your message\" />\r\n            </div>\r\n            <div><button >Add message</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMassageFormRedux = reduxForm({form: 'dialogAddMassageForm'})(AddMassageForm)\r\n\r\nexport default Dialogs;\r\n","\r\nimport React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n        render(){\r\n            if (!this.props.isAuth) return <Redirect to='/login' />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    \r\n    let connectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return connectedAuthRedirectComponent\r\n}","import { sendMessage } from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport { connect } from 'react-redux';\r\nimport { withAuthRedirect } from './../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\nlet mapStateToProps = (state) => ({\r\n    dialogsPage:state.dialogsPage,\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {sendMessage}),        \r\n           withAuthRedirect\r\n    )(Dialogs);  \r\n"],"sourceRoot":""}